variables:
  PR_COMMENTER_IMAGE: registry.ddbuild.io/images/pr-commenter:3
  DOCKER_IMAGE: 486234852809.dkr.ecr.us-east-1.amazonaws.com/docker:24.0.4-gbi-focal
  CI_IMAGE: registry.ddbuild.io/ci/azure-log-forwarding-orchestration-ci:latest
  REPLICATED_DOCKER_REGISTRY: 486234852809.dkr.ecr.us-east-1.amazonaws.com/lfo
  INTERNAL_DOCKER_REGISTRY: registry.ddbuild.io/lfo
  QA_DOCKER_REGISTRY: lfoqa.azurecr.io
stages:
  - ci-image
  - test
  - build
  - publish-qa
  - publish
# ------------- CI IMAGE -------------
ci-build-image:
  image: $DOCKER_IMAGE
  stage: ci-image
  rules:
    - when: manual
      allow_failure: true
  tags: ['arch:amd64']
  script:
    - docker buildx build --platform linux/amd64 --tag "$CI_IMAGE" -f "ci/build-image/Dockerfile" . --push
# ------------- CONTROL PLANE -------------
control-plane-tests:
  image: $CI_IMAGE
  stage: test
  tags: ['arch:amd64']
  script:
    - ci/scripts/control_plane/test.sh
  artifacts:
    paths:
      - ci/control_plane_coverage.md
control-plane-test-dependencies:
  image: $CI_IMAGE
  stage: test
  tags: ['arch:amd64']
  script:
    - ci/scripts/control_plane/test-dependencies.sh
control-plane-formatting:
  image: $CI_IMAGE
  stage: test
  tags: ['arch:amd64']
  script:
    - ci/scripts/control_plane/format.sh
control-plane-lint:
  image: $CI_IMAGE
  stage: test
  tags: ['arch:amd64']
  script:
    - ci/scripts/control_plane/lint.sh
control-plane-type-check:
  image: $CI_IMAGE
  stage: test
  tags: ['arch:amd64']
  script:
    - ci/scripts/control_plane/type-check.sh
deployer-test-build:
  image: $DOCKER_IMAGE
  stage: test
  tags: ['arch:amd64']
  script:
    - docker buildx build --platform=linux/amd64 -f "ci/deployer-task/Dockerfile" ./control_plane
build-tasks:
  image: $CI_IMAGE
  stage: build
  tags: ['arch:amd64']
  #  only:
  #    refs:
  #      - main
  script:
    - ci/scripts/control_plane/build_tasks.sh
  artifacts:
    paths:
      - dist/diagnostic_settings_task.zip
      - dist/resources_task.zip
      - dist/scaling_task.zip
      - dist/initial_run.sh
publish-tasks:
  image: $CI_IMAGE
  stage: publish
  tags: ['arch:amd64']
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
  variables:
    KUBERNETES_POD_ANNOTATIONS_azure: cloud-iam.emissary.datadoghq.com/azure=88d13348-0530-418a-89c0-9caa32d59037
  script:
    - control_plane/scripts/publish.py https://ddazurelfo.blob.core.windows.net
  dependencies:
    - build-tasks
arm-template-publish:
  image: $CI_IMAGE
  stage: publish
  tags: ['arch:amd64']
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
  variables:
    KUBERNETES_POD_ANNOTATIONS_azure: cloud-iam.emissary.datadoghq.com/azure=88d13348-0530-418a-89c0-9caa32d59037
  script:
    - az bicep build --file ./deploy/azuredeploy.bicep --outfile ./azuredeploy.json
    - ./ci/scripts/arm-template/upload-public.sh ./deploy/createUiDefinition.json templates createUiDefinition.json
    - ./ci/scripts/arm-template/upload-public.sh ./azuredeploy.json templates azuredeploy.json
standalone-forwarder-arm-template-publish:
  image: $CI_IMAGE
  stage: publish
  tags: ['arch:amd64']
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
  variables:
    KUBERNETES_POD_ANNOTATIONS_azure: cloud-iam.emissary.datadoghq.com/azure=88d13348-0530-418a-89c0-9caa32d59037
  script:
    - az bicep build --file ./deploy/forwarder.bicep
    - ./ci/scripts/arm-template/upload-public.sh ./deploy/forwarder.json templates forwarder.json
uninstall-script-publish:
  image: $CI_IMAGE
  stage: publish
  tags: ['arch:amd64']
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
  variables:
    KUBERNETES_POD_ANNOTATIONS_azure: cloud-iam.emissary.datadoghq.com/azure=88d13348-0530-418a-89c0-9caa32d59037
  script:
    - ./ci/scripts/arm-template/upload-public.sh ./control_plane/scripts/uninstall.py uninstall uninstall.py
deployer-build-tagged:
  image: $DOCKER_IMAGE
  stage: build
  only:
    refs:
      - main
  tags: ['arch:amd64']
  script:
    - docker buildx build --platform=linux/amd64 --build-arg VERSION_TAG="v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}" --tag $INTERNAL_DOCKER_REGISTRY/deployer:v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA} -f "ci/deployer-task/Dockerfile" ./control_plane --push
deployer-publish:
  stage: publish
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
  needs:
    - deployer-build-tagged
  trigger:
    project: DataDog/public-images
    branch: main
    strategy: depend
  variables:
    IMG_SOURCES: $REPLICATED_DOCKER_REGISTRY/deployer:v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}
    IMG_DESTINATIONS: deployer:latest,deployer:v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}
    IMG_SIGNING: 'false'
    IMG_REGISTRIES: public-azure
# ------------- FORWARDER -------------
forwarder-tests:
  image: $CI_IMAGE
  stage: test
  tags: ['docker-in-docker:amd64']
  script:
    - ci/scripts/forwarder/test.sh
  artifacts:
    paths:
      - ci/forwarder_coverage.md
forwarder-test-build:
  image: $DOCKER_IMAGE
  stage: test
  tags: ['arch:amd64']
  script:
    - docker buildx build --platform=linux/amd64 ./forwarder
forwarder-build-tagged:
  image: $DOCKER_IMAGE
  stage: build
  tags: ['arch:amd64']
  only:
    refs:
      - main
  script:
    - ci/scripts/forwarder/build_and_push.sh $INTERNAL_DOCKER_REGISTRY v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA} v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}
forwarder-publish:
  stage: publish
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
  needs:
    - forwarder-build-tagged
  trigger:
    project: DataDog/public-images
    branch: main
    strategy: depend
  variables:
    IMG_SOURCES: $REPLICATED_DOCKER_REGISTRY/forwarder:v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}
    IMG_DESTINATIONS: forwarder:latest,forwarder:v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}
    IMG_SIGNING: 'false'
    IMG_REGISTRIES: public-azure
forwarder-tidy:
  image: $CI_IMAGE
  stage: test
  tags: ['arch:amd64']
  script:
    - cd forwarder
    - go mod tidy
    - git diff --exit-code
forwarder-vet:
  image: $CI_IMAGE
  stage: test
  tags: ['arch:amd64']
  script:
    - cd forwarder
    - go vet ./...
forwarder-format:
  image: $CI_IMAGE
  stage: test
  tags: ['arch:amd64']
  script:
    - cd forwarder
    - go fmt ./...
    - git diff --exit-code
copyright-headers:
  image: $CI_IMAGE
  stage: test
  tags: ['arch:amd64']
  dependencies:
    - control-plane-formatting
    - forwarder-vet
  script:
    - ci/scripts/licensing/add_copyright_header.py
    - git diff --exit-code
# ------------- CODE COV -------------
coverage-comment:
  image: $PR_COMMENTER_IMAGE
  stage: build
  tags: ['arch:amd64']
  rules:
    - if: $CI_COMMIT_BRANCH != "main"
      allow_failure: true
  dependencies:
    - forwarder-tests
    - control-plane-tests
  script:
    - ci/scripts/coverage-comment.sh
# ------------- QA ENV -------------
forwarder-build-qa:
  image: $DOCKER_IMAGE
  stage: build
  tags: ['arch:amd64']
  #  only:
  #    refs:
  #      - main
  script:
    - $(vault kv get -field=docker kv/k8s/gitlab-runner/azure-log-forwarding-orchestration/qa)
    - ci/scripts/forwarder/build_and_push.sh $QA_DOCKER_REGISTRY latest v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}
publish-tasks-qa:
  image: $CI_IMAGE
  stage: publish-qa
  tags: ['arch:amd64']
  #  only:
  #    refs:
  #      - main
  script:
    - export AZURE_TENANT_ID=$(vault kv get -field=azureTenantId kv/k8s/gitlab-runner/azure-log-forwarding-orchestration/qa)
    - export AZURE_CLIENT_ID=$(vault kv get -field=azureClientId kv/k8s/gitlab-runner/azure-log-forwarding-orchestration/qa)
    - export AZURE_CLIENT_SECRET=$(vault kv get -field=azureSecret kv/k8s/gitlab-runner/azure-log-forwarding-orchestration/qa)
    - control_plane/scripts/publish.py https://lfoqa.blob.core.windows.net
  dependencies:
    - build-tasks
arm-template-publish-qa:
  image: $CI_IMAGE
  stage: publish-qa
  tags: ['arch:amd64']
  #  only:
  #    refs:
  #      - main
  script:
    - sed -i 's|https://ddazurelfo.blob.core.windows.net|https://lfoqa.blob.core.windows.net|g' ./deploy/azuredeploy.bicep
    - az bicep build --file ./deploy/azuredeploy.bicep --outfile ./azuredeploy.json
    - ./ci/scripts/arm-template/upload-qa-env.sh ./deploy/createUiDefinition.json templates createUiDefinition.json
    - ./ci/scripts/arm-template/upload-qa-env.sh ./azuredeploy.json templates azuredeploy.json
standalone-forwarder-arm-template-publish-qa:
  image: $CI_IMAGE
  stage: publish-qa
  tags: ['arch:amd64']
  only:
    refs:
      - main
  script:
    - az bicep build --file ./deploy/forwarder.bicep
    - ./ci/scripts/arm-template/upload-qa-env.sh ./deploy/forwarder.json templates forwarder.json
deploy-qa-env:
  image: $CI_IMAGE
  stage: publish-qa
  tags: ['arch:amd64']
  #  only:
  #    refs:
  #      - main
  dependencies:
    - publish-tasks-qa
    - arm-template-publish-qa
  script:
    - ci/scripts/deploy/deploy_qa_env.sh
deployer-build-qa:
  image: $DOCKER_IMAGE
  stage: build
  #  only:
  #    refs:
  #      - main
  tags: ['arch:amd64']
  script:
    - $(vault kv get -field=docker kv/k8s/gitlab-runner/azure-log-forwarding-orchestration/qa)
    - docker buildx build --platform=linux/amd64 --build-arg VERSION_TAG="v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}" --tag $QA_DOCKER_REGISTRY/deployer:latest -f "ci/deployer-task/Dockerfile" ./control_plane --push
uninstall-script-publish-qa:
  image: $CI_IMAGE
  stage: publish-qa
  tags: ['arch:amd64']
  only:
    refs:
      - main
  script:
    - ./ci/scripts/arm-template/upload-qa-env.sh ./control_plane/scripts/uninstall.py uninstall uninstall.py
