// Code generated by MockGen. DO NOT EDIT.
// Source: blobCursorClient.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	blobCache "github.com/DataDog/azure-log-forwarding-offering/go_LFO/blobCache"
	gomock "github.com/golang/mock/gomock"
)

// MockAzureCursorClient is a mock of AzureCursorClient interface.
type MockAzureCursorClient struct {
	ctrl     *gomock.Controller
	recorder *MockAzureCursorClientMockRecorder
}

// MockAzureCursorClientMockRecorder is the mock recorder for MockAzureCursorClient.
type MockAzureCursorClientMockRecorder struct {
	mock *MockAzureCursorClient
}

// NewMockAzureCursorClient creates a new mock instance.
func NewMockAzureCursorClient(ctrl *gomock.Controller) *MockAzureCursorClient {
	mock := &MockAzureCursorClient{ctrl: ctrl}
	mock.recorder = &MockAzureCursorClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAzureCursorClient) EXPECT() *MockAzureCursorClientMockRecorder {
	return m.recorder
}

// DownloadBlobCursor mocks base method.
func (m *MockAzureCursorClient) DownloadBlobCursor() (error, blobCache.CursorConfigs) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadBlobCursor")
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(blobCache.CursorConfigs)
	return ret0, ret1
}

// DownloadBlobCursor indicates an expected call of DownloadBlobCursor.
func (mr *MockAzureCursorClientMockRecorder) DownloadBlobCursor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadBlobCursor", reflect.TypeOf((*MockAzureCursorClient)(nil).DownloadBlobCursor))
}

// TeardownCursorCache mocks base method.
func (m *MockAzureCursorClient) TeardownCursorCache() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeardownCursorCache")
	ret0, _ := ret[0].(error)
	return ret0
}

// TeardownCursorCache indicates an expected call of TeardownCursorCache.
func (mr *MockAzureCursorClientMockRecorder) TeardownCursorCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeardownCursorCache", reflect.TypeOf((*MockAzureCursorClient)(nil).TeardownCursorCache))
}

// UploadBlobCursor mocks base method.
func (m *MockAzureCursorClient) UploadBlobCursor(cursorData blobCache.CursorConfigs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadBlobCursor", cursorData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadBlobCursor indicates an expected call of UploadBlobCursor.
func (mr *MockAzureCursorClientMockRecorder) UploadBlobCursor(cursorData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadBlobCursor", reflect.TypeOf((*MockAzureCursorClient)(nil).UploadBlobCursor), cursorData)
}
