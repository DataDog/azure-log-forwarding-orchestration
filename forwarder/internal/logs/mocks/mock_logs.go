// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=client.go -destination=mocks/mock_logs.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	datadogV2 "github.com/DataDog/datadog-api-client-go/v2/api/datadogV2"
	gomock "go.uber.org/mock/gomock"
)

// MockDatadogLogsSubmitter is a mock of DatadogLogsSubmitter interface.
type MockDatadogLogsSubmitter struct {
	ctrl     *gomock.Controller
	recorder *MockDatadogLogsSubmitterMockRecorder
}

// MockDatadogLogsSubmitterMockRecorder is the mock recorder for MockDatadogLogsSubmitter.
type MockDatadogLogsSubmitterMockRecorder struct {
	mock *MockDatadogLogsSubmitter
}

// NewMockDatadogLogsSubmitter creates a new mock instance.
func NewMockDatadogLogsSubmitter(ctrl *gomock.Controller) *MockDatadogLogsSubmitter {
	mock := &MockDatadogLogsSubmitter{ctrl: ctrl}
	mock.recorder = &MockDatadogLogsSubmitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatadogLogsSubmitter) EXPECT() *MockDatadogLogsSubmitterMockRecorder {
	return m.recorder
}

// SubmitLog mocks base method.
func (m *MockDatadogLogsSubmitter) SubmitLog(ctx context.Context, body []datadogV2.HTTPLogItem, o ...datadogV2.SubmitLogOptionalParameters) (any, *http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range o {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubmitLog", varargs...)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SubmitLog indicates an expected call of SubmitLog.
func (mr *MockDatadogLogsSubmitterMockRecorder) SubmitLog(ctx, body any, o ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, o...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitLog", reflect.TypeOf((*MockDatadogLogsSubmitter)(nil).SubmitLog), varargs...)
}
