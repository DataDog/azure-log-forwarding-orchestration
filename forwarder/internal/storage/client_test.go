// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/client.go
//
// Generated by this command:
//
//	mockgen -source=internal/storage/client.go -destination internal/storage/client_test.go
//

// Package mock_storage is a generated GoMock package.
package storage_test

import (
	context "context"
	reflect "reflect"

	azblob "github.com/Azure/azure-sdk-for-go/sdk/storage/azblob"
	storage "github.com/DataDog/azure-log-forwarding-orchestration/forwarder/internal/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockAzureBlobClient is a mock of AzureBlobClient interface.
type MockAzureBlobClient struct {
	ctrl     *gomock.Controller
	recorder *MockAzureBlobClientMockRecorder
}

// MockAzureBlobClientMockRecorder is the mock recorder for MockAzureBlobClient.
type MockAzureBlobClientMockRecorder struct {
	mock *MockAzureBlobClient
}

// NewMockAzureBlobClient creates a new mock instance.
func NewMockAzureBlobClient(ctrl *gomock.Controller) *MockAzureBlobClient {
	mock := &MockAzureBlobClient{ctrl: ctrl}
	mock.recorder = &MockAzureBlobClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAzureBlobClient) EXPECT() *MockAzureBlobClientMockRecorder {
	return m.recorder
}

// NewListContainersPager mocks base method.
func (m *MockAzureBlobClient) NewListContainersPager(o *azblob.ListContainersOptions) storage.AzurePager[azblob.ListContainersResponse] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListContainersPager", o)
	ret0, _ := ret[0].(storage.AzurePager[azblob.ListContainersResponse])
	return ret0
}

// NewListContainersPager indicates an expected call of NewListContainersPager.
func (mr *MockAzureBlobClientMockRecorder) NewListContainersPager(o any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListContainersPager", reflect.TypeOf((*MockAzureBlobClient)(nil).NewListContainersPager), o)
}

// MockAzurePager is a mock of AzurePager interface.
type MockAzurePager[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockAzurePagerMockRecorder[T]
}

// MockAzurePagerMockRecorder is the mock recorder for MockAzurePager.
type MockAzurePagerMockRecorder[T any] struct {
	mock *MockAzurePager[T]
}

// NewMockAzurePager creates a new mock instance.
func NewMockAzurePager[T any](ctrl *gomock.Controller) *MockAzurePager[T] {
	mock := &MockAzurePager[T]{ctrl: ctrl}
	mock.recorder = &MockAzurePagerMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAzurePager[T]) EXPECT() *MockAzurePagerMockRecorder[T] {
	return m.recorder
}

// More mocks base method.
func (m *MockAzurePager[T]) More() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "More")
	ret0, _ := ret[0].(bool)
	return ret0
}

// More indicates an expected call of More.
func (mr *MockAzurePagerMockRecorder[T]) More() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "More", reflect.TypeOf((*MockAzurePager[T])(nil).More))
}

// NextPage mocks base method.
func (m *MockAzurePager[T]) NextPage(ctx context.Context) (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextPage", ctx)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextPage indicates an expected call of NextPage.
func (mr *MockAzurePagerMockRecorder[T]) NextPage(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextPage", reflect.TypeOf((*MockAzurePager[T])(nil).NextPage), ctx)
}
