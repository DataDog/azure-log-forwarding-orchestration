// Code generated by MockGen. DO NOT EDIT.
// Source: errgroupWithPanicHandler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockErrGroup is a mock of ErrGroup interface.
type MockErrGroup struct {
	ctrl     *gomock.Controller
	recorder *MockErrGroupMockRecorder
}

// MockErrGroupMockRecorder is the mock recorder for MockErrGroup.
type MockErrGroupMockRecorder struct {
	mock *MockErrGroup
}

// NewMockErrGroup creates a new mock instance.
func NewMockErrGroup(ctrl *gomock.Controller) *MockErrGroup {
	mock := &MockErrGroup{ctrl: ctrl}
	mock.recorder = &MockErrGroupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrGroup) EXPECT() *MockErrGroupMockRecorder {
	return m.recorder
}

// Go mocks base method.
func (m *MockErrGroup) Go(f func() error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Go", f)
}

// Go indicates an expected call of Go.
func (mr *MockErrGroupMockRecorder) Go(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Go", reflect.TypeOf((*MockErrGroup)(nil).Go), f)
}

// SetLimit mocks base method.
func (m *MockErrGroup) SetLimit(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLimit", arg0)
}

// SetLimit indicates an expected call of SetLimit.
func (mr *MockErrGroupMockRecorder) SetLimit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLimit", reflect.TypeOf((*MockErrGroup)(nil).SetLimit), arg0)
}

// Wait mocks base method.
func (m *MockErrGroup) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockErrGroupMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockErrGroup)(nil).Wait))
}
