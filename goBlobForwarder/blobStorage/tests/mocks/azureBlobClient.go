// Code generated by MockGen. DO NOT EDIT.
// Source: azureBlobClient.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"

	runtime "github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	azblob "github.com/Azure/azure-sdk-for-go/sdk/storage/azblob"
	gomock "github.com/golang/mock/gomock"
)

// MockAzureBlobClient is a mock of AzureBlobClient interface.
type MockAzureBlobClient struct {
	ctrl     *gomock.Controller
	recorder *MockAzureBlobClientMockRecorder
}

// MockAzureBlobClientMockRecorder is the mock recorder for MockAzureBlobClient.
type MockAzureBlobClientMockRecorder struct {
	mock *MockAzureBlobClient
}

// NewMockAzureBlobClient creates a new mock instance.
func NewMockAzureBlobClient(ctrl *gomock.Controller) *MockAzureBlobClient {
	mock := &MockAzureBlobClient{ctrl: ctrl}
	mock.recorder = &MockAzureBlobClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAzureBlobClient) EXPECT() *MockAzureBlobClientMockRecorder {
	return m.recorder
}

// CreateContainer mocks base method.
func (m *MockAzureBlobClient) CreateContainer(ctx context.Context, containerName string, o *azblob.CreateContainerOptions) (azblob.CreateContainerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainer", ctx, containerName, o)
	ret0, _ := ret[0].(azblob.CreateContainerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainer indicates an expected call of CreateContainer.
func (mr *MockAzureBlobClientMockRecorder) CreateContainer(ctx, containerName, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainer", reflect.TypeOf((*MockAzureBlobClient)(nil).CreateContainer), ctx, containerName, o)
}

// DeleteBlob mocks base method.
func (m *MockAzureBlobClient) DeleteBlob(ctx context.Context, containerName, blobName string, o *azblob.DeleteBlobOptions) (azblob.DeleteBlobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBlob", ctx, containerName, blobName, o)
	ret0, _ := ret[0].(azblob.DeleteBlobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBlob indicates an expected call of DeleteBlob.
func (mr *MockAzureBlobClientMockRecorder) DeleteBlob(ctx, containerName, blobName, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlob", reflect.TypeOf((*MockAzureBlobClient)(nil).DeleteBlob), ctx, containerName, blobName, o)
}

// DeleteContainer mocks base method.
func (m *MockAzureBlobClient) DeleteContainer(ctx context.Context, containerName string, o *azblob.DeleteContainerOptions) (azblob.DeleteContainerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainer", ctx, containerName, o)
	ret0, _ := ret[0].(azblob.DeleteContainerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContainer indicates an expected call of DeleteContainer.
func (mr *MockAzureBlobClientMockRecorder) DeleteContainer(ctx, containerName, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainer", reflect.TypeOf((*MockAzureBlobClient)(nil).DeleteContainer), ctx, containerName, o)
}

// DownloadStream mocks base method.
func (m *MockAzureBlobClient) DownloadStream(ctx context.Context, containerName, blobName string, o *azblob.DownloadStreamOptions) (azblob.DownloadStreamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadStream", ctx, containerName, blobName, o)
	ret0, _ := ret[0].(azblob.DownloadStreamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadStream indicates an expected call of DownloadStream.
func (mr *MockAzureBlobClientMockRecorder) DownloadStream(ctx, containerName, blobName, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadStream", reflect.TypeOf((*MockAzureBlobClient)(nil).DownloadStream), ctx, containerName, blobName, o)
}

// NewListBlobsFlatPager mocks base method.
func (m *MockAzureBlobClient) NewListBlobsFlatPager(containerName string, o *azblob.ListBlobsFlatOptions) *runtime.Pager[azblob.ListBlobsFlatResponse] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListBlobsFlatPager", containerName, o)
	ret0, _ := ret[0].(*runtime.Pager[azblob.ListBlobsFlatResponse])
	return ret0
}

// NewListBlobsFlatPager indicates an expected call of NewListBlobsFlatPager.
func (mr *MockAzureBlobClientMockRecorder) NewListBlobsFlatPager(containerName, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListBlobsFlatPager", reflect.TypeOf((*MockAzureBlobClient)(nil).NewListBlobsFlatPager), containerName, o)
}

// NewListContainersPager mocks base method.
func (m *MockAzureBlobClient) NewListContainersPager(o *azblob.ListContainersOptions) *runtime.Pager[azblob.ListContainersResponse] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListContainersPager", o)
	ret0, _ := ret[0].(*runtime.Pager[azblob.ListContainersResponse])
	return ret0
}

// NewListContainersPager indicates an expected call of NewListContainersPager.
func (mr *MockAzureBlobClientMockRecorder) NewListContainersPager(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListContainersPager", reflect.TypeOf((*MockAzureBlobClient)(nil).NewListContainersPager), o)
}

// UploadStream mocks base method.
func (m *MockAzureBlobClient) UploadStream(ctx context.Context, containerName, blobName string, body io.Reader, o *azblob.UploadStreamOptions) (azblob.UploadStreamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadStream", ctx, containerName, blobName, body, o)
	ret0, _ := ret[0].(azblob.UploadStreamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadStream indicates an expected call of UploadStream.
func (mr *MockAzureBlobClientMockRecorder) UploadStream(ctx, containerName, blobName, body, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadStream", reflect.TypeOf((*MockAzureBlobClient)(nil).UploadStream), ctx, containerName, blobName, body, o)
}

// MockAzurePager is a mock of AzurePager interface.
type MockAzurePager[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockAzurePagerMockRecorder[T]
}

// MockAzurePagerMockRecorder is the mock recorder for MockAzurePager.
type MockAzurePagerMockRecorder[T any] struct {
	mock *MockAzurePager[T]
}

// NewMockAzurePager creates a new mock instance.
func NewMockAzurePager[T any](ctrl *gomock.Controller) *MockAzurePager[T] {
	mock := &MockAzurePager[T]{ctrl: ctrl}
	mock.recorder = &MockAzurePagerMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAzurePager[T]) EXPECT() *MockAzurePagerMockRecorder[T] {
	return m.recorder
}

// More mocks base method.
func (m *MockAzurePager[T]) More() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "More")
	ret0, _ := ret[0].(bool)
	return ret0
}

// More indicates an expected call of More.
func (mr *MockAzurePagerMockRecorder[T]) More() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "More", reflect.TypeOf((*MockAzurePager[T])(nil).More))
}

// NextPage mocks base method.
func (m *MockAzurePager[T]) NextPage(ctx context.Context) (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextPage", ctx)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextPage indicates an expected call of NextPage.
func (mr *MockAzurePagerMockRecorder[T]) NextPage(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextPage", reflect.TypeOf((*MockAzurePager[T])(nil).NextPage), ctx)
}
